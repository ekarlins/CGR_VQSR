#!/usr/bin/python

rule select_giab_fp:
    input:
        snp = 'SNP_parts/{part}.vcf',
        indel = 'INDEL_parts/{part}.vcf',
        giab_vcf = getGiabVcf,
        giab_bed = getGiabBed
    output:
        snp = 'GiabFP_SNP_parts_{giabSamp}/{part}.vcf',
        indel = 'GiabFP_INDEL_parts_{giabSamp}/{part}.vcf'
    params:
        module = 'module load GATK/3.8-1',
        ref = config['REF']
    run:
        vcfKeepSamps = GiabSampleDict[wildcards.giabSamp]
        shell('{params.module};GATK -m 4g SelectVariants -R {params.ref} -V {input.snp} -L {input.giab_bed} --discordance {input.giab_vcf} -o {output.snp} -sn ' + ' -sn '.join(vcfKeepSamps))
        shell('{params.module};GATK -m 4g SelectVariants -R {params.ref} -V {input.indel} -L {input.giab_bed} --discordance {input.giab_vcf} -o {output.indel} -sn ' + ' -sn '.join(vcfKeepSamps))
        

rule combine_parts_giab:
    input:
        sorted(expand('GiabFP_{{varType}}_parts_{{giabSamp}}/{part}.vcf', part = PARTS))
    output:
        'GiabFP_{varType}_combined_{giabSamp}/variants.vcf'
    run:
        with open(output[0], 'w') as out:
            with open(input[0]) as f:
                for line in f:
                    out.write(line)
            for partVcf in input[1:]:
                with open(partVcf) as f:
                    line = f.readline()
                    while line != '' and line[0] == '#':
                        line = f.readline()
                    while line != '':
                        out.write(line)
                        line = f.readline()


rule bgzip_combined_giab_vcf:
    input:
        'GiabFP_{varType}_combined_{giabSamp}/variants.vcf'
    output:
        'GiabFP_{varType}_combined_{giabSamp}/variants.vcf.gz'
    params:
        module = 'module load samtools/1.8'
    shell:
        '{params.module};bgzip {input}'

rule tabix_annotated_giab_vcf:
    input:
        'GiabFP_{varType}_combined_{giabSamp}/variants.vcf.gz'
    output:
        'GiabFP_{varType}_combined_{giabSamp}/variants.vcf.gz.tbi'
    params:
        module = 'module load samtools/1.8'
    shell:
        '{params.module};tabix -p vcf {input}'


##GATK CombineVariants makes multi-allelic variants, so I'm going to do something else.
rule merge_giab_vcfs:
    input:
        vcfs = expand('GiabFP_{{varType}}_combined_{giabSamp}/variants.vcf.gz', giabSamp = GiabSampleDict.keys()),
        tabix = expand('GiabFP_{{varType}}_combined_{giabSamp}/variants.vcf.gz.tbi', giabSamp = GiabSampleDict.keys())
    output:
        'GiabFP_{varType}_final/variants.vcf'
    run:
        vcfTabList = []
        for vcf in input.vcfs:
            vcfTabList.append(pysam.TabixFile(vcf))
        for vcf in vcfTabList[1:]:
            if vcf.contigs != vcfTabList[0].contigs:
                print('vcf files do not have the same chromosomes')
                sys.exit(1)
        with open(output[0], 'w') as out:
            for line in vcf1.header:
                if not line.startswith('#CHROM'):
                    out.write(line)
                line_list = line.split()
                out.write('\t'.join(line_list[:8]) + '\n')
            for chrom in vcfTabList[0].contigs:
                posDict = {}
                for vcf in vcfTabList:
                    for line in vcf.fetch(chrom):
                        line_list = line.split()
                        (chrom, posStr, snp, ref, alt) = line_list[:5]
                        pos = int(posStr)
                        posDict[pos] = (ref, alt)
                for pos in sorted(posDict.keys()):
                    (ref, alt) = posDict[pos]
                    out.write('\t'.join([chrom, str(pos), '.', ref, alt, '.', '.', '.']) + '\n')
        for vcf in vcfTabList:
            vcf.close()


rule merged_giab_tabix:
    input:
        'GiabFP_{varType}_final/variants.vcf'
    output:
        vcf = 'GiabFP_{varType}_final/variants.vcf.gz',
        tab = 'GiabFP_{varType}_final/variants.vcf.gz.tbi'
    params:
        module = 'module load samtools/1.8'
    shell:
        '{params.module};bgzip {input};tabix -p vcf {input}.gz'

